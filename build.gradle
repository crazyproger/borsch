buildscript {
//    ext.kotlin_version = '1.0.0-rc-1047'
    repositories {
        maven {
            url 'https://dl.bintray.com/kotlin/kotlin-eap/'
        }
        mavenCentral()
        maven {
            url 'http://oss.sonatype.org/content/repositories/snapshots'
        }
        mavenLocal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.1'
    }
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.protobuf' // must be after java

description = "Borsch"

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '1.0'

repositories {
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap/' }
    maven { url 'https://dl.bintray.com/kotlin/exposed/' }
    mavenCentral()
    maven { url 'http://oss.sonatype.org/content/repositories/snapshots' }
    mavenLocal()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile 'io.grpc:grpc-all:0.9.0'

    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'ch.qos.logback:logback-classic:1.1.3'

    compile "org.jetbrains.exposed:exposed:$exposed_version"

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testRuntime 'com.h2database:h2:1.4.190'
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/generated/main/java'
    main.java.srcDirs += 'src/generated/main/grpc'
}

protobuf {
    protoc {
        // The version of protoc must match protobuf-java. If you don't depend on
        // protobuf-java directly, you will be transitively depending on the
        // protobuf-java version that grpc depends on.
        artifact = 'com.google.protobuf:protoc:3.0.0-beta-1'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:0.9.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

startScripts.enabled = false
task borschServer(type: CreateStartScripts) {
    mainClassName = "net.crazyproger.borsch.MainKt"
    applicationName = "borsch-server"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}
applicationDistribution.into("bin") {
    from(borschServer)
    fileMode = 0755
}

// At a test failure, log the stack trace to the console so that we don't
// have to open the HTML in a browser.
test {
    testLogging {
        exceptionFormat = 'full'
        showExceptions true
        showCauses true
        showStackTraces true
    }
}

// Let intellij projects refer to generated code
idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java");
        sourceDirs += file("${projectDir}/src/generated/main/grpc");
    }
}